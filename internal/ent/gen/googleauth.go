// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/sekalahita/epirus/internal/ent/gen/googleauth"
	"github.com/sekalahita/epirus/internal/ent/gen/user"
)

// GoogleAuth is the model entity for the GoogleAuth schema.
type GoogleAuth struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// GoogleID holds the value of the "google_id" field.
	GoogleID string `json:"google_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GoogleAuthQuery when eager-loading is set.
	Edges GoogleAuthEdges `json:"edges"`
}

// GoogleAuthEdges holds the relations/edges for other nodes in the graph.
type GoogleAuthEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GoogleAuthEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GoogleAuth) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case googleauth.FieldID, googleauth.FieldUserID, googleauth.FieldGoogleID:
			values[i] = new(sql.NullString)
		case googleauth.FieldCreatedAt, googleauth.FieldUpdatedAt, googleauth.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GoogleAuth", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GoogleAuth fields.
func (ga *GoogleAuth) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case googleauth.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ga.ID = value.String
			}
		case googleauth.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ga.CreatedAt = value.Time
			}
		case googleauth.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ga.UpdatedAt = value.Time
			}
		case googleauth.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ga.DeletedAt = value.Time
			}
		case googleauth.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ga.UserID = value.String
			}
		case googleauth.FieldGoogleID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field google_id", values[i])
			} else if value.Valid {
				ga.GoogleID = value.String
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the GoogleAuth entity.
func (ga *GoogleAuth) QueryUser() *UserQuery {
	return NewGoogleAuthClient(ga.config).QueryUser(ga)
}

// Update returns a builder for updating this GoogleAuth.
// Note that you need to call GoogleAuth.Unwrap() before calling this method if this GoogleAuth
// was returned from a transaction, and the transaction was committed or rolled back.
func (ga *GoogleAuth) Update() *GoogleAuthUpdateOne {
	return NewGoogleAuthClient(ga.config).UpdateOne(ga)
}

// Unwrap unwraps the GoogleAuth entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ga *GoogleAuth) Unwrap() *GoogleAuth {
	_tx, ok := ga.config.driver.(*txDriver)
	if !ok {
		panic("gen: GoogleAuth is not a transactional entity")
	}
	ga.config.driver = _tx.drv
	return ga
}

// String implements the fmt.Stringer.
func (ga *GoogleAuth) String() string {
	var builder strings.Builder
	builder.WriteString("GoogleAuth(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ga.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ga.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ga.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(ga.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(ga.UserID)
	builder.WriteString(", ")
	builder.WriteString("google_id=")
	builder.WriteString(ga.GoogleID)
	builder.WriteByte(')')
	return builder.String()
}

// GoogleAuths is a parsable slice of GoogleAuth.
type GoogleAuths []*GoogleAuth
