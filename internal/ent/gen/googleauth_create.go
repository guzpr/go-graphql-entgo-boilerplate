// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sekalahita/epirus/internal/ent/gen/googleauth"
	"github.com/sekalahita/epirus/internal/ent/gen/user"
)

// GoogleAuthCreate is the builder for creating a GoogleAuth entity.
type GoogleAuthCreate struct {
	config
	mutation *GoogleAuthMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (gac *GoogleAuthCreate) SetCreatedAt(t time.Time) *GoogleAuthCreate {
	gac.mutation.SetCreatedAt(t)
	return gac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gac *GoogleAuthCreate) SetNillableCreatedAt(t *time.Time) *GoogleAuthCreate {
	if t != nil {
		gac.SetCreatedAt(*t)
	}
	return gac
}

// SetUpdatedAt sets the "updated_at" field.
func (gac *GoogleAuthCreate) SetUpdatedAt(t time.Time) *GoogleAuthCreate {
	gac.mutation.SetUpdatedAt(t)
	return gac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gac *GoogleAuthCreate) SetNillableUpdatedAt(t *time.Time) *GoogleAuthCreate {
	if t != nil {
		gac.SetUpdatedAt(*t)
	}
	return gac
}

// SetDeletedAt sets the "deleted_at" field.
func (gac *GoogleAuthCreate) SetDeletedAt(t time.Time) *GoogleAuthCreate {
	gac.mutation.SetDeletedAt(t)
	return gac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gac *GoogleAuthCreate) SetNillableDeletedAt(t *time.Time) *GoogleAuthCreate {
	if t != nil {
		gac.SetDeletedAt(*t)
	}
	return gac
}

// SetUserID sets the "user_id" field.
func (gac *GoogleAuthCreate) SetUserID(s string) *GoogleAuthCreate {
	gac.mutation.SetUserID(s)
	return gac
}

// SetGoogleID sets the "google_id" field.
func (gac *GoogleAuthCreate) SetGoogleID(s string) *GoogleAuthCreate {
	gac.mutation.SetGoogleID(s)
	return gac
}

// SetID sets the "id" field.
func (gac *GoogleAuthCreate) SetID(s string) *GoogleAuthCreate {
	gac.mutation.SetID(s)
	return gac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (gac *GoogleAuthCreate) SetNillableID(s *string) *GoogleAuthCreate {
	if s != nil {
		gac.SetID(*s)
	}
	return gac
}

// SetUser sets the "user" edge to the User entity.
func (gac *GoogleAuthCreate) SetUser(u *User) *GoogleAuthCreate {
	return gac.SetUserID(u.ID)
}

// Mutation returns the GoogleAuthMutation object of the builder.
func (gac *GoogleAuthCreate) Mutation() *GoogleAuthMutation {
	return gac.mutation
}

// Save creates the GoogleAuth in the database.
func (gac *GoogleAuthCreate) Save(ctx context.Context) (*GoogleAuth, error) {
	if err := gac.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*GoogleAuth, GoogleAuthMutation](ctx, gac.sqlSave, gac.mutation, gac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gac *GoogleAuthCreate) SaveX(ctx context.Context) *GoogleAuth {
	v, err := gac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gac *GoogleAuthCreate) Exec(ctx context.Context) error {
	_, err := gac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gac *GoogleAuthCreate) ExecX(ctx context.Context) {
	if err := gac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gac *GoogleAuthCreate) defaults() error {
	if _, ok := gac.mutation.CreatedAt(); !ok {
		if googleauth.DefaultCreatedAt == nil {
			return fmt.Errorf("gen: uninitialized googleauth.DefaultCreatedAt (forgotten import gen/runtime?)")
		}
		v := googleauth.DefaultCreatedAt()
		gac.mutation.SetCreatedAt(v)
	}
	if _, ok := gac.mutation.UpdatedAt(); !ok {
		if googleauth.DefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized googleauth.DefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := googleauth.DefaultUpdatedAt()
		gac.mutation.SetUpdatedAt(v)
	}
	if _, ok := gac.mutation.ID(); !ok {
		if googleauth.DefaultID == nil {
			return fmt.Errorf("gen: uninitialized googleauth.DefaultID (forgotten import gen/runtime?)")
		}
		v := googleauth.DefaultID()
		gac.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (gac *GoogleAuthCreate) check() error {
	if _, ok := gac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`gen: missing required field "GoogleAuth.created_at"`)}
	}
	if _, ok := gac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`gen: missing required field "GoogleAuth.updated_at"`)}
	}
	if _, ok := gac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`gen: missing required field "GoogleAuth.user_id"`)}
	}
	if _, ok := gac.mutation.GoogleID(); !ok {
		return &ValidationError{Name: "google_id", err: errors.New(`gen: missing required field "GoogleAuth.google_id"`)}
	}
	if v, ok := gac.mutation.ID(); ok {
		if err := googleauth.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`gen: validator failed for field "GoogleAuth.id": %w`, err)}
		}
	}
	if _, ok := gac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`gen: missing required edge "GoogleAuth.user"`)}
	}
	return nil
}

func (gac *GoogleAuthCreate) sqlSave(ctx context.Context) (*GoogleAuth, error) {
	if err := gac.check(); err != nil {
		return nil, err
	}
	_node, _spec := gac.createSpec()
	if err := sqlgraph.CreateNode(ctx, gac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected GoogleAuth.ID type: %T", _spec.ID.Value)
		}
	}
	gac.mutation.id = &_node.ID
	gac.mutation.done = true
	return _node, nil
}

func (gac *GoogleAuthCreate) createSpec() (*GoogleAuth, *sqlgraph.CreateSpec) {
	var (
		_node = &GoogleAuth{config: gac.config}
		_spec = sqlgraph.NewCreateSpec(googleauth.Table, sqlgraph.NewFieldSpec(googleauth.FieldID, field.TypeString))
	)
	if id, ok := gac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := gac.mutation.CreatedAt(); ok {
		_spec.SetField(googleauth.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := gac.mutation.UpdatedAt(); ok {
		_spec.SetField(googleauth.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := gac.mutation.DeletedAt(); ok {
		_spec.SetField(googleauth.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := gac.mutation.GoogleID(); ok {
		_spec.SetField(googleauth.FieldGoogleID, field.TypeString, value)
		_node.GoogleID = value
	}
	if nodes := gac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   googleauth.UserTable,
			Columns: []string{googleauth.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GoogleAuthCreateBulk is the builder for creating many GoogleAuth entities in bulk.
type GoogleAuthCreateBulk struct {
	config
	builders []*GoogleAuthCreate
}

// Save creates the GoogleAuth entities in the database.
func (gacb *GoogleAuthCreateBulk) Save(ctx context.Context) ([]*GoogleAuth, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gacb.builders))
	nodes := make([]*GoogleAuth, len(gacb.builders))
	mutators := make([]Mutator, len(gacb.builders))
	for i := range gacb.builders {
		func(i int, root context.Context) {
			builder := gacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GoogleAuthMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gacb *GoogleAuthCreateBulk) SaveX(ctx context.Context) []*GoogleAuth {
	v, err := gacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gacb *GoogleAuthCreateBulk) Exec(ctx context.Context) error {
	_, err := gacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gacb *GoogleAuthCreateBulk) ExecX(ctx context.Context) {
	if err := gacb.Exec(ctx); err != nil {
		panic(err)
	}
}
