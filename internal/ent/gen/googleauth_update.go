// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sekalahita/epirus/internal/ent/gen/googleauth"
	"github.com/sekalahita/epirus/internal/ent/gen/predicate"
	"github.com/sekalahita/epirus/internal/ent/gen/user"
)

// GoogleAuthUpdate is the builder for updating GoogleAuth entities.
type GoogleAuthUpdate struct {
	config
	hooks     []Hook
	mutation  *GoogleAuthMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the GoogleAuthUpdate builder.
func (gau *GoogleAuthUpdate) Where(ps ...predicate.GoogleAuth) *GoogleAuthUpdate {
	gau.mutation.Where(ps...)
	return gau
}

// SetUpdatedAt sets the "updated_at" field.
func (gau *GoogleAuthUpdate) SetUpdatedAt(t time.Time) *GoogleAuthUpdate {
	gau.mutation.SetUpdatedAt(t)
	return gau
}

// SetDeletedAt sets the "deleted_at" field.
func (gau *GoogleAuthUpdate) SetDeletedAt(t time.Time) *GoogleAuthUpdate {
	gau.mutation.SetDeletedAt(t)
	return gau
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gau *GoogleAuthUpdate) SetNillableDeletedAt(t *time.Time) *GoogleAuthUpdate {
	if t != nil {
		gau.SetDeletedAt(*t)
	}
	return gau
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (gau *GoogleAuthUpdate) ClearDeletedAt() *GoogleAuthUpdate {
	gau.mutation.ClearDeletedAt()
	return gau
}

// SetUserID sets the "user_id" field.
func (gau *GoogleAuthUpdate) SetUserID(s string) *GoogleAuthUpdate {
	gau.mutation.SetUserID(s)
	return gau
}

// SetGoogleID sets the "google_id" field.
func (gau *GoogleAuthUpdate) SetGoogleID(s string) *GoogleAuthUpdate {
	gau.mutation.SetGoogleID(s)
	return gau
}

// SetUser sets the "user" edge to the User entity.
func (gau *GoogleAuthUpdate) SetUser(u *User) *GoogleAuthUpdate {
	return gau.SetUserID(u.ID)
}

// Mutation returns the GoogleAuthMutation object of the builder.
func (gau *GoogleAuthUpdate) Mutation() *GoogleAuthMutation {
	return gau.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (gau *GoogleAuthUpdate) ClearUser() *GoogleAuthUpdate {
	gau.mutation.ClearUser()
	return gau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gau *GoogleAuthUpdate) Save(ctx context.Context) (int, error) {
	if err := gau.defaults(); err != nil {
		return 0, err
	}
	return withHooks[int, GoogleAuthMutation](ctx, gau.sqlSave, gau.mutation, gau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gau *GoogleAuthUpdate) SaveX(ctx context.Context) int {
	affected, err := gau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gau *GoogleAuthUpdate) Exec(ctx context.Context) error {
	_, err := gau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gau *GoogleAuthUpdate) ExecX(ctx context.Context) {
	if err := gau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gau *GoogleAuthUpdate) defaults() error {
	if _, ok := gau.mutation.UpdatedAt(); !ok {
		if googleauth.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized googleauth.UpdateDefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := googleauth.UpdateDefaultUpdatedAt()
		gau.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (gau *GoogleAuthUpdate) check() error {
	if _, ok := gau.mutation.UserID(); gau.mutation.UserCleared() && !ok {
		return errors.New(`gen: clearing a required unique edge "GoogleAuth.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (gau *GoogleAuthUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GoogleAuthUpdate {
	gau.modifiers = append(gau.modifiers, modifiers...)
	return gau
}

func (gau *GoogleAuthUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(googleauth.Table, googleauth.Columns, sqlgraph.NewFieldSpec(googleauth.FieldID, field.TypeString))
	if ps := gau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gau.mutation.UpdatedAt(); ok {
		_spec.SetField(googleauth.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := gau.mutation.DeletedAt(); ok {
		_spec.SetField(googleauth.FieldDeletedAt, field.TypeTime, value)
	}
	if gau.mutation.DeletedAtCleared() {
		_spec.ClearField(googleauth.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := gau.mutation.GoogleID(); ok {
		_spec.SetField(googleauth.FieldGoogleID, field.TypeString, value)
	}
	if gau.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   googleauth.UserTable,
			Columns: []string{googleauth.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gau.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   googleauth.UserTable,
			Columns: []string{googleauth.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(gau.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, gau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{googleauth.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gau.mutation.done = true
	return n, nil
}

// GoogleAuthUpdateOne is the builder for updating a single GoogleAuth entity.
type GoogleAuthUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *GoogleAuthMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (gauo *GoogleAuthUpdateOne) SetUpdatedAt(t time.Time) *GoogleAuthUpdateOne {
	gauo.mutation.SetUpdatedAt(t)
	return gauo
}

// SetDeletedAt sets the "deleted_at" field.
func (gauo *GoogleAuthUpdateOne) SetDeletedAt(t time.Time) *GoogleAuthUpdateOne {
	gauo.mutation.SetDeletedAt(t)
	return gauo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gauo *GoogleAuthUpdateOne) SetNillableDeletedAt(t *time.Time) *GoogleAuthUpdateOne {
	if t != nil {
		gauo.SetDeletedAt(*t)
	}
	return gauo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (gauo *GoogleAuthUpdateOne) ClearDeletedAt() *GoogleAuthUpdateOne {
	gauo.mutation.ClearDeletedAt()
	return gauo
}

// SetUserID sets the "user_id" field.
func (gauo *GoogleAuthUpdateOne) SetUserID(s string) *GoogleAuthUpdateOne {
	gauo.mutation.SetUserID(s)
	return gauo
}

// SetGoogleID sets the "google_id" field.
func (gauo *GoogleAuthUpdateOne) SetGoogleID(s string) *GoogleAuthUpdateOne {
	gauo.mutation.SetGoogleID(s)
	return gauo
}

// SetUser sets the "user" edge to the User entity.
func (gauo *GoogleAuthUpdateOne) SetUser(u *User) *GoogleAuthUpdateOne {
	return gauo.SetUserID(u.ID)
}

// Mutation returns the GoogleAuthMutation object of the builder.
func (gauo *GoogleAuthUpdateOne) Mutation() *GoogleAuthMutation {
	return gauo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (gauo *GoogleAuthUpdateOne) ClearUser() *GoogleAuthUpdateOne {
	gauo.mutation.ClearUser()
	return gauo
}

// Where appends a list predicates to the GoogleAuthUpdate builder.
func (gauo *GoogleAuthUpdateOne) Where(ps ...predicate.GoogleAuth) *GoogleAuthUpdateOne {
	gauo.mutation.Where(ps...)
	return gauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gauo *GoogleAuthUpdateOne) Select(field string, fields ...string) *GoogleAuthUpdateOne {
	gauo.fields = append([]string{field}, fields...)
	return gauo
}

// Save executes the query and returns the updated GoogleAuth entity.
func (gauo *GoogleAuthUpdateOne) Save(ctx context.Context) (*GoogleAuth, error) {
	if err := gauo.defaults(); err != nil {
		return nil, err
	}
	return withHooks[*GoogleAuth, GoogleAuthMutation](ctx, gauo.sqlSave, gauo.mutation, gauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gauo *GoogleAuthUpdateOne) SaveX(ctx context.Context) *GoogleAuth {
	node, err := gauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gauo *GoogleAuthUpdateOne) Exec(ctx context.Context) error {
	_, err := gauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gauo *GoogleAuthUpdateOne) ExecX(ctx context.Context) {
	if err := gauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gauo *GoogleAuthUpdateOne) defaults() error {
	if _, ok := gauo.mutation.UpdatedAt(); !ok {
		if googleauth.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("gen: uninitialized googleauth.UpdateDefaultUpdatedAt (forgotten import gen/runtime?)")
		}
		v := googleauth.UpdateDefaultUpdatedAt()
		gauo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (gauo *GoogleAuthUpdateOne) check() error {
	if _, ok := gauo.mutation.UserID(); gauo.mutation.UserCleared() && !ok {
		return errors.New(`gen: clearing a required unique edge "GoogleAuth.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (gauo *GoogleAuthUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *GoogleAuthUpdateOne {
	gauo.modifiers = append(gauo.modifiers, modifiers...)
	return gauo
}

func (gauo *GoogleAuthUpdateOne) sqlSave(ctx context.Context) (_node *GoogleAuth, err error) {
	if err := gauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(googleauth.Table, googleauth.Columns, sqlgraph.NewFieldSpec(googleauth.FieldID, field.TypeString))
	id, ok := gauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "GoogleAuth.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, googleauth.FieldID)
		for _, f := range fields {
			if !googleauth.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != googleauth.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gauo.mutation.UpdatedAt(); ok {
		_spec.SetField(googleauth.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := gauo.mutation.DeletedAt(); ok {
		_spec.SetField(googleauth.FieldDeletedAt, field.TypeTime, value)
	}
	if gauo.mutation.DeletedAtCleared() {
		_spec.ClearField(googleauth.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := gauo.mutation.GoogleID(); ok {
		_spec.SetField(googleauth.FieldGoogleID, field.TypeString, value)
	}
	if gauo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   googleauth.UserTable,
			Columns: []string{googleauth.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gauo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   googleauth.UserTable,
			Columns: []string{googleauth.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(gauo.modifiers...)
	_node = &GoogleAuth{config: gauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{googleauth.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gauo.mutation.done = true
	return _node, nil
}
